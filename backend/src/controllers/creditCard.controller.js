const { StatusCodes, ReasonPhrases } = require('http-status-codes');
const { QueryTypes } = require('sequelize');
const ResponseModel = require('../utils/responseModel.utils');
const sequelize = require('../database');
const { models } = require('../database');


// Store card information through raw query.
exports.createCardRawQuery = async (req, res, next) => {
	const response = new ResponseModel();

	const {
		creditCardNumber,  
		creditCardCVV,   
		creditCardHolder,
		expireDate
	} = req.body;
    	
	try {
		const card =  await sequelize.query(`
		INSERT INTO "creditCard"
		("creditCardNumber", "creditCardCVV", "creditCardHolder", "expireDate")
		VALUES($1,$2,$3,$4) 
         returning *
		`, {
			bind: [
				`${creditCardNumber}`,
				`${creditCardCVV}`,
				`${creditCardHolder}`,
				`${expireDate}`,
			],
			type: QueryTypes.INSERT
		});

		response.setData(card);
		response.setStatus(ReasonPhrases.CREATED);

		return res.status(StatusCodes.CREATED).send(response);
	} catch (err) {
		const response = new ResponseModel();
		response.setStatus(ReasonPhrases.PARTIAL_CONTENT);
		response.setError('Error! '+ err);
		return res.status(StatusCodes.PARTIAL_CONTENT).send(response);
	}
};

// Store card information through sequelize query.
exports.createCardAutoGeneratedQuery = async (req, res, next) => {
	const response = new ResponseModel();
	try {
		const {
		creditCardNumber,  
		creditCardCVV,   
		creditCardHolder,
		expireDate
	} = req.body;
		const card =  await models.creditCard.create({
			creditCardNumber,  
		creditCardCVV,   
		creditCardHolder,
		expireDate
		});

		response.setData(card);
		response.setStatus(ReasonPhrases.CREATED);

		return res.status(StatusCodes.CREATED).send(response);
	} catch (err) {
		const response = new ResponseModel();
		response.setStatus(ReasonPhrases.PARTIAL_CONTENT);
		response.setError('Error! '+ err);
		return res.status(StatusCodes.PARTIAL_CONTENT).send(response);
	}
};

